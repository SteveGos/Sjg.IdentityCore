// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sjg.IdentityCore;

namespace WebAppTest.Migrations
{
    [DbContext(typeof(AccAuthContext))]
    partial class AccAuthContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Sjg.IdentityCore")
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Sjg.IdentityCore.Models.AccAuthGroup", b =>
                {
                    b.Property<Guid>("AccAuthGroupId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category")
                        .HasMaxLength(256);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("AccAuthGroupId");

                    b.HasIndex("Category");

                    b.HasIndex("Description");

                    b.HasIndex("Group");

                    b.ToTable("AccAuthGroups");
                });

            modelBuilder.Entity("Sjg.IdentityCore.Models.AccAuthGroupRole", b =>
                {
                    b.Property<Guid>("AccAuthGroupId");

                    b.Property<Guid>("AccessRoleId");

                    b.HasKey("AccAuthGroupId", "AccessRoleId");

                    b.HasIndex("AccessRoleId");

                    b.ToTable("AccAuthGroupRoles");
                });

            modelBuilder.Entity("Sjg.IdentityCore.Models.AccAuthGroupUser", b =>
                {
                    b.Property<Guid>("AccAuthGroupId");

                    b.Property<Guid>("AccAuthUserId");

                    b.HasKey("AccAuthGroupId", "AccAuthUserId");

                    b.HasIndex("AccAuthUserId");

                    b.ToTable("AccAuthGroupUsers");
                });

            modelBuilder.Entity("Sjg.IdentityCore.Models.AccAuthInvite", b =>
                {
                    b.Property<Guid>("AccAuthInviteId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(128);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<DateTime>("ExpirationDateUtc");

                    b.Property<bool>("IsServiceAccount");

                    b.HasKey("AccAuthInviteId");

                    b.HasIndex("Code");

                    b.HasIndex("DisplayName");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("ExpirationDateUtc");

                    b.ToTable("AccAuthInvites");
                });

            modelBuilder.Entity("Sjg.IdentityCore.Models.AccAuthInviteRole", b =>
                {
                    b.Property<Guid>("AccAuthInviteId");

                    b.Property<Guid>("AccessRoleId");

                    b.HasKey("AccAuthInviteId", "AccessRoleId");

                    b.HasIndex("AccessRoleId");

                    b.ToTable("AccAuthInviteRoles");
                });

            modelBuilder.Entity("Sjg.IdentityCore.Models.AccAuthRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category")
                        .HasMaxLength(256);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Description")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("Description");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Sjg.IdentityCore.Models.AccAuthUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("EmailDomainName")
                        .HasMaxLength(256);

                    b.Property<string>("FirstName")
                        .HasMaxLength(75);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsActiveDirectoryUser");

                    b.Property<bool>("IsFrozen");

                    b.Property<bool>("IsInternalServiceAccount");

                    b.Property<bool>("IsServiceAccount");

                    b.Property<DateTime?>("LastEmailConfirmedUtc");

                    b.Property<DateTime?>("LastLoginDateTimeUtc");

                    b.Property<string>("LastName")
                        .HasMaxLength(75);

                    b.Property<DateTime?>("LastPasswordChangeDateTimeUtc");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<bool>("PasswordNeverExpires");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("EmailDomainName");

                    b.HasIndex("FirstName");

                    b.HasIndex("LastEmailConfirmedUtc");

                    b.HasIndex("LastLoginDateTimeUtc");

                    b.HasIndex("LastName");

                    b.HasIndex("LastPasswordChangeDateTimeUtc");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Sjg.IdentityCore.Models.AccAuthRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Sjg.IdentityCore.Models.AccAuthUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Sjg.IdentityCore.Models.AccAuthUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Sjg.IdentityCore.Models.AccAuthRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sjg.IdentityCore.Models.AccAuthUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Sjg.IdentityCore.Models.AccAuthUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sjg.IdentityCore.Models.AccAuthGroupRole", b =>
                {
                    b.HasOne("Sjg.IdentityCore.Models.AccAuthGroup", "AccAuthGroup")
                        .WithMany("AccAuthGroupRoles")
                        .HasForeignKey("AccAuthGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sjg.IdentityCore.Models.AccAuthRole", "AccessRole")
                        .WithMany("AccessRoleGroups")
                        .HasForeignKey("AccessRoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sjg.IdentityCore.Models.AccAuthGroupUser", b =>
                {
                    b.HasOne("Sjg.IdentityCore.Models.AccAuthGroup", "AccAuthGroup")
                        .WithMany("AccAuthGroupUsers")
                        .HasForeignKey("AccAuthGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sjg.IdentityCore.Models.AccAuthUser", "AccAuthUser")
                        .WithMany("AccAuthUserGroups")
                        .HasForeignKey("AccAuthUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sjg.IdentityCore.Models.AccAuthInviteRole", b =>
                {
                    b.HasOne("Sjg.IdentityCore.Models.AccAuthInvite", "AccAuthInvite")
                        .WithMany("AccAuthInviteRoles")
                        .HasForeignKey("AccAuthInviteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sjg.IdentityCore.Models.AccAuthRole", "AccessRole")
                        .WithMany()
                        .HasForeignKey("AccessRoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
